BoneAppleTeeth
Queenie Xiang 
Kevin Bao
Andrew Chen 
pd 1
---------------------
The Oregon Trail 


Suggested usage: 
* Replace all fields, angle brackets included, with specified info.
  eg, pd <pd#> --> pd 3
* Delete these instructions once all teammates understand usage.

devlog--
2017-01-11
--------------------------------------------------------------
Queenie :: 
Created and modified the files for the roles of the Players (Farmer, Banker, Carpenter)
Created and modified the Character file 
Modifications for both include:
1. Created variables
2. Created constructors 
3. Created methods necessary for each class (the accessor methods) 

Kevin :: 
Created and modified the Player file 
Modifications include:
1. Created variables
2. Created constructors
3. Created methods necessary for Player class (the accessor methods)  


Andrew ::
Created and modified the Woo file 
1. Created a method to test out the functionality that may be used for the game 

Researched on certain functionalities that will be included in the game 

2017-01-12
-------------------------------------------------------------
Queenie ::
Modified the Woo file and Player and its subclasses
Modifications include:
1. Implementing an initial inventory where each subclass of Player receives a different starting item depending on their occupation.
2. Creating and implementing a Shop mechanism at the start of the game.
3. Implementing the cs1 package's Keyboard class to accept user input like name.

Kevin ::
Modified Character and all of its subclasses, and Woo
1. Implemented constructors for each class utilizing super().
2. Added basic methods to necessary classes.
3. Modified Woo to accept user inputs to continue or rest.

Andrew ::
Modified Character and Woo
1. Implemented a 20-item long array of Strings as the inventory for Character
2. Modified the Shop mechanism
3. Created and implemented a rest() method
4. Modified Woo to end the game when the user's milesTraveled equals to the maxMiles.

2017-01-14
--------------------------------------------------------------
Kevin ::
Modified Woo, Character, and Player classes and subclasses
1. Created an about() method that returns a string of the stats of a Player
2. Modified the Continue option in playTurn() so that the inventory loses food, and the Player will eventually die.
3. Moved inventory from Player class to Woo class
4. Modified Woo so that family members can be added.
5. Modified Woo so that characters can have spaces in their names.

2017-01-15
--------------------------------------------------------------
Queenie ::
Modified Woo and Character classes 
1. Modified so that Characters have two new variables : boolean hasDisease and String disease which will indicate whether or not they have a disease.
2. Added randomEvents() to Woo so that random events (natural disasters, diseases) can occur now at different probabilities. 
3. Modified the weather variable in Woo by adding a method called setWeather() which can set different weathers according to the divisibility of the daysTraveled counter. 
4. Modified the information printed each time the player continues by adding in how many days have passed.
5. Edited the information the shop displays overtime the player makes a purchase (shows how much will be deducted and how much the user will have remaining).
6. Edited the options the user can make at the start of every new round. 

2017-01-17
--------------------------------------------------------------
Kevin ::
Modified README.md
1. Updated README.md file to display a brief project description and launch instructions.

2017-01-18
--------------------------------------------------------------
Queenie ::
1. Altered game structure so that game ended right away when Player is dead 
2. Added in more comments
3. Changed the algorithm for the probability of each Character having an event happen to them (getting a disease, etc.) so that everyone had an equal chance of getting something
4. Made the printing statements more clear and detailed. 
5. Added more medicine items into the shop with a more variety of +hp
6. Implemented the ability to use items each round (Medicine, wagon fixing items) 
7. Set a limit on the size of the inventory 
8. Fixed a small bug in the shop when adding the items bought 

Kevin ::
Modified Woo.java
1. Implemented a printInventory method that prints the contents of the inventory in the format:
   	       <item1>: <quantity1>
	       <item2>: <quantity2>
	       . . .
2. Modified addItem(item) method to add items AND sort the inventory at the same time.
3. Modified "eating" algorithm so that each starving member loses health individually instead of the whole family losing health simultaneously.

2017-01-19
--------------------------------------------------------------
Andrew ::
1. began working on weight mechanic (too much weight, move slow)
2. began working on applying medicine/wood
3. made it so that checking things doesn't pass days

2017-01-20
--------------------------------------------------------------
Queenie ::
Kevin ::
Modified Woo.java
1. Implemented days and months system
2. Added a way to print a death message upon the death of a family member.
3. Modified shop() algorithm to make it more universal
4. Modified rest() to increase characters' health
5. Added not functional landmarks
Andrew ::
1. created family array to robustify  code
2. finished weight, made pace depend on more things

2017-01-21
--------------------------------------------------------------
Queenie ::

Kevin ::
Modified Woo.java
1. Implemented landmarks (cities, towns, rivers)
2. Implemented checkpoints (held the names and locations of landmarks).
3. Modified "Check Location" action in playTurn() to print the distance the player is from the next checkpoint.
4. Implemented crossRiver() which allowed the user to ford the river, float across the river, or pay for a ferry to sail across the river.
5. Modified "Continue" action in playTurn() so that the user stops at a checkpoint when the user reaches/passes the location of a checkpoint.

Andrew ::
1. forbade health going above its max or below 0 (cleaned up death)
2. forbade inventory going above max (cleaned up addItem method)
3. fixed shop so that you wouldn't waste money if buying more stuff than you can hold
4. split off more helper functions from playTurn

2017-01-22
--------------------------------------------------------------
Queenie ::
1. Added new variable called temperature which will affect the weather, the pace, and the health of members 
2. Did some editing on the formatting of the printed statements 
3. Added code to allow the user to pick the month of when to start
4. Modified the distance for the different check points
5. Modified the catch blocks to print the appropriate statements and assume the correct default value

Kevin ::
Modified Woo.java
1. Modified playTurn() so that the user can only "Cross the River!" at a river and "Visit the shop" at a Town or a City.
2. Implemented method printSlowly() to print a String one character at a time. 
3. Made some design changes in the UI. (used printSlowly() a lot)
4. Added the possibility to find random amounts of money.
5. Added an introduction to the game to introduce the atmosphere. (used printSlowly)
6. Added comments for some of the methods in Woo.java.
Modified Character and Player files
1. Removed unnecessary methods

Andrew ::
1. fixed random event probabilities (its not always dysentery)
2. added random events, like picking up stuff
3. added some comments


==============================================================

zone of reflection--
Flesh out each category whenever necessary, appropriate.
 Need not be fully filled in until end of project,
 but best done as you go along.


/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. We were very confused as to how to implement an array of Characters containing all of the Characters. Once we figured this out, it saved us a lot of time and robustified our code immensely. 

2. In the past, the Characters would still be alive with 0 Health, but now they die when they're at 0 Health.

3. We originally had a huge shop method with so many if statements and large blocks of code and the different attributes of different items but we were able to nicely organize and compact the way that the shop worked with the 2D arrays. 

UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. We didn't implement an ammunition system because with the current inventory system, ammunition will fill up the inventory pretty quickly, and not provide room to have other items in the inventory. We would have to re-write the current inventory system to accommodate for ammunition.

COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. How to print a string one character at a time using "Thread.sleep(x)"
   - this made the progression of the game easier to follow because now, some
     things will print slowly instead of everything printing all at once.
   - it also adds some suspense when crossing the river when doing
     printSlowly(". . . " , 100)

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. We decided to implement an array of Character that contains the Player and all the Members of the family because this allowed us to use a for-loop when we needed to perform something on every Character. This saved us a lot of time and space.

2. We decided to implement a 2-d array called items that contained the properties of each item (price , weight) the user can buy from the shop because it was important to keep the attributes of the items in one place.

3. We originally had the Arraylist of integers in Player.java, but decided to move it into Woo.java because the inventory interacts with many things, not just the Player.

4. We originally planned to have the user hunt by quickly typing a word, like in the original version of Oregon Trail, but decided to use what we already have and just made hunting a number-guessing game because it was difficult to find how to implement the original method for hunting.

LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. It's always better to print something when testing a certain method/functionality. If done in a loop, we can see how many times the method loops/or if it's looping correctly.

2. Always think simpler. 

3. If something is extremely repetitive, chances are there’s a simpler and more robust way to implement it. 



 ______   ______   __   __   __       ______   _______     
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\    
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__   
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\   
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/        
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \   
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/   
==============================================================


yyyy-mm-dd
--------------------------------------------------------------
<Member> :: <Thing member did.>
<Member> :: <Thing member did.>
<Member> :: <Thing member did.>
==============================================================
